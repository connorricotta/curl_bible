name: Test, Publish Image, and Deploy

on: [push]

jobs:
  test-code:
    runs-on: ubuntu-latest
    container: quay.io/connorricotta/ubuntu_node:latest
    strategy:
      matrix:
        # python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        python-version: ["3.9"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Make venv
        run: mkdir .venv

      - name: Pipenv Install (with cache)
        uses: https://github.com/kevincobain2000/action-cache-http@v2
        with:
          version: ${{ matrix.python-version }}
          lock_file: Pipfile.lock
          install_command: pipenv install -r requirements_cicd.txt
          destination_folder: .venv
          cache_http_api: ${{ secrets.CACHE_URL }}
          basic_auth_username: ${{ secrets.CACHE_AUTH_USERNAME }}
          basic_auth_password: ${{ secrets.CACHE_AUTH_PASSWORD }}

      - name: "Create env file"
        run: |
          echo "${{ secrets.ENV_FILE_DEV }}" > .env
          chmod a+r .env

      - name: Run tests
        run: |
          pipenv run pytest
          pipenv run flake8 .
          pipenv run bandit .
          pipenv run isort .
          pipenv run black .

      - run: echo "This job's status is ${{ job.status }}."

  publish:
    # Only run if the push has a new version and the previous tests pass.
    needs: test-code
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    container: quay.io/connorricotta/ubuntu_node:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Pull tag from git
        uses: https://github.com/WyriHaximus/github-action-get-previous-tag@v1
        id: tag

      - name: "Login to quay.io"
        run: |
          echo ${{ secrets.QUAY_PASSWORD }} | docker login ${{ secrets.IMAGE_REGISTRY }} --password-stdin --username ${{ secrets.QUAY_USERNAME }}

      - name: Set up QEMU
        uses: https://github.com/docker/setup-qemu-action@v2

      - name: install buildx
        id: buildx
        uses: https://github.com/crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest

      - name: Make SSH key
        run: |
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ssh_key
          chmod 600 ssh_key

      - name: SSH to to the device
        run: |
          ssh -o "StrictHostKeyChecking no" -t -i ssh_key ${{ secrets.DEPLOY_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }}/${{ gitea.repository }}
            echo "${{ secrets.ENV_FILE_PROD }}" > curl_bible/.env
            cp -p curl_bible/.env .
            source curl_bible/.env

            podman pull ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:latest
            podman-compose down && podman-compose up -d
          '

      - run: echo "This job's status is ${{ job.status }}."
      # - name: SSH to test
      #   run: |
      #     ssh -o "StrictHostKeyChecking no" -t -i ssh_key ${{ secrets.DEPLOY_HOST }} '
      #       cd ${{ secrets.DEPLOY_PATH }}/${{ gitea.repository }}
      #       git pull
      #       git fetch --prune
      #       echo "${{ secrets.ENV_FILE_PROD }}" > curl_bible/.env
      #       chmod a+r curl_bible/.env
      #       cp -p curl_bible/.env .
      #       source curl_bible/.env
      #       podman pull ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:latest
      #       podman-compose down && podman-compose up -d
      #     '

      # - name: Buildx
      #   uses: docker/build-push-action
      #   with:
      #     context: .
      #     platforms: linux/amd64,linux/arm/v7,linux/arm64
      #     push: true
      #     cacheFrom: ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}
      #     cacheTo: ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}
      #     tags:
      #       - ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:latest
      #       - ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:${{ steps.tag.outputs.tag }}

      # docker buildx build --platform linux/arm64 -t ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:${{ steps.tag.outputs.tag }} -t ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:latest --push .
      # - name: "Build new Docker Image"
      # run: |
      # docker buildx build --platform linux/amd64,linux/arm/v7,linux/arm64 -t ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:${{ steps.tag.outputs.tag }} -t ${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }}:latest --cache-from type=registry,ref=${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }} --cache-to type=registry,ref=${{ secrets.IMAGE_REGISTRY }}/${{ gitea.repository }},mode=max --push .
      # docker buildx build --platform linux/amd64,linux/arm/v7,linux/arm64  --cache-from type=registry,ref=quay.io/connorricotta/curl_bible --cache-from type=registry,ref=quay.io/connorricotta/curl_bible,mode=max -t quay.io/connorricotta/curl_bible:v0.1.18 -t quay.io/connorricotta/curl_bible:latest --push .
