on: [push]
jobs:
  test:
    runs-on: ubuntu
    container:
      image: quay.io/connorricotta/ubuntu_node:latest

    services:
      bible_db:
        image: quay.io/connorricotta/ubuntu_node:latest
        env:
          MYSQL_ROOT_USER: "${{ secrets.CI_MYSQL_ROOT_USER }}"
          MYSQL_ROOT_PASSWORD: "${{ secrets.CI_MYSQL_ROOT_PASSWORD }}"
          MYSQL_USERNAME: "${{ secrets.CI_MYSQL_USERNAME }}"
          MYSQL_PASSWORD: "${{ secrets.CI_MYSQL_PASSWORD }}"
          MYSQL_DATABASE: "${{ secrets.CI_MYSQL_DATABASE }}"

    # strategy:
    #   matrix:
    #     # python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    #     python-version: ["3.9"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create hashfiles
        id: hash
        run: |
          hash=$(md5sum curl_bible/Pipfile.lock | awk '{ print $1}')
          echo "HASH=$hash">> "$GITHUB_OUTPUT"

      - name: Make Virtual Environment Directory
        run: mkdir curl_bible/.venv

      - name: Restore from cache (if it exists)
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: curl_bible/.venv
          key: ${{ runner.os }}-pipenv-${{ steps.hash.outputs.HASH }}

      - name: Install Python if cache failed.
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd curl_bible
          pipenv install --dev

      - name: Save to cache
        uses: actions/cache/save@v3
        id: cache
        with:
          path: curl_bible/.venv
          key: ${{ runner.os }}-pipenv-${{ steps.hash.outputs.HASH }}

      - name: Setup Env file
        run: |
          echo "${{ secrets.CI_ENV_FILE }}" > .env
          cp .env curl_bible/.env

      - name: Run Tests
        run: |
          cd curl_bible
          ping bible_db
          pipenv run pytest tests/
          pipenv run flake8 .
          pipenv run bandit .
          pipenv run isort .
          pipenv run black .
